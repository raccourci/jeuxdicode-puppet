# This is a Varnish 4.x VCL file
vcl 4.0;
import directors;

# Default settings and probe
<% settings = scope.lookupvar('jeuxdicode::clusters::jeuxdicode::cache::settings') -%>

# Public backends
<% scope.lookupvar('jeuxdicode::clusters::jeuxdicode::cache::backends_public').each do |backend| -%>
backend <%= backend['name'] %> {
    .host = "<%= backend['host'] %>";
    .port = "<%= backend['port'] %>";
    .probe = {
        .url = "<%= settings['url'] %>";
        .timeout   = <%= settings['timeout'] %>;
        .interval  = <%= settings['interval'] %>;
        .window    = <%= settings['window'] %>;
        .threshold = <%= settings['threshold'] %>;
    }
    .first_byte_timeout     = <%= settings['first_byte_timeout'] %>;   # How long to wait before we receive a first byte from our backend?
    .connect_timeout        = <%= settings['connect_timeout'] %>;     # How long to wait for a backend connection?
    .between_bytes_timeout  = <%= settings['between_bytes_timeout'] %>;     # How long to wait between bytes received from our backend?
}
<% end -%>

# Admin backends
<% backends_admin_exists = false -%>
<% scope.lookupvar('jeuxdicode::clusters::jeuxdicode::cache::backends_admin').each do |backend| -%>
<% backends_admin_exists = true -%>
backend <%= backend['name'] %> {
    .host = "<%= backend['host'] %>";
    .port = "<%= backend['port'] %>";
    .probe = {
        .url = "<%= settings['url'] %>";
        .timeout   = <%= settings['timeout'] %>;
        .interval  = <%= settings['interval'] %>;
        .window    = <%= settings['window'] %>;
        .threshold = <%= settings['threshold'] %>;
    }
    .first_byte_timeout     = <%= settings['first_byte_timeout'] %>;   # How long to wait before we receive a first byte from our backend?
    .connect_timeout        = <%= settings['connect_timeout'] %>;     # How long to wait for a backend connection?
    .between_bytes_timeout  = <%= settings['between_bytes_timeout'] %>;     # How long to wait between bytes received from our backend?
}
<% end -%>

# Below is an example redirector based on round-robin requests
sub vcl_init {
    new cluster_public = directors.round_robin();
<% scope.lookupvar('jeuxdicode::clusters::jeuxdicode::cache::backends_public').each do |backend| -%>
    cluster_public.add_backend(<%= backend['name'] %>);
<% end -%>
<% if backends_admin_exists -%>
    new cluster_admin = directors.round_robin();
<% scope.lookupvar('jeuxdicode::clusters::jeuxdicode::cache::backends_admin').each do |backend| -%>
    cluster_admin.add_backend(<%= backend['name'] %>);
<% end -%>
<% end -%>
}

acl purge {
    <%= scope.lookupvar('jeuxdicode::clusters::jeuxdicode::cache::purge_acl') %>
}

# Handle the HTTP request received by the client
sub vcl_recv {

    # Choose the round-robin backend
    set req.backend_hint = cluster_public.backend();

    # shortcut for DFind requests
    if (req.url ~ "^/w00tw00t") {
        return (synth(404, "Not Found"));
    }

    if (req.restarts == 0) {
        if (req.http.X-Forwarded-For) {
            set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
    }

    # Normalize the header, remove the port (in case you're testing this on various TCP ports)
    set req.http.Host = regsub(req.http.Host, ":[0-9]+", "");

    # Allow purging
    if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
            # Not from an allowed IP? Then die with an error.
            return (synth(405, "This IP is not allowed to send PURGE requests."));
        }

        # If you got this stage (and didn't error out above), purge the cached result
        return (purge);
    }

    # Allow ban
    if (req.method == "BAN") {
        if (!client.ip ~ purge) {
            # Not from an allowed IP? Then die with an error.
            return (synth(405, "This IP is not allowed to send PURGE requests."));
        }

        if (req.url != "/") {
            # Ban every cache object containing the given tag
            ban("obj.http.x-domain == " + req.http.host + " && obj.http.x-jeuxdicode-cache-tags ~ " + regsuball(req.url, "^/", ""));
        } else {
            # Ban the full domain
            ban("obj.http.x-domain == " + req.http.host);
        }

        return(synth(200, "BAN added"));
    }

    # Only deal with "normal" types
    if (req.method != "GET" &&
         req.method != "HEAD" &&
         req.method != "PUT" &&
         req.method != "POST" &&
         req.method != "TRACE" &&
         req.method != "OPTIONS" &&
         req.method != "PATCH" &&
         req.method != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }

    # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
    if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
    }

    # Don't cache. This makes sure requests are to this URL always passed.
    if (req.http.Cache-Control ~ "no-cache" ||
         req.url ~ "^/phpmyadmin" ||
         req.url ~ "^/user" ||
         req.url ~ "^/apc") {
        return (pass);
    }

    # Some generic URL manipulation, useful for all templates that follow
    # First remove the Google Analytics added parameters, useless for our backend
    if (req.url ~ "(\?|&)(utm_source|utm_medium|utm_campaign|gclid|cx|ie|cof|siteurl)=") {
        set req.url = regsuball(req.url, "&(utm_source|utm_medium|utm_campaign|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "");
        set req.url = regsuball(req.url, "\?(utm_source|utm_medium|utm_campaign|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "?");
        set req.url = regsub(req.url, "\?&", "?");
        set req.url = regsub(req.url, "\?$", "");
    }

    # Strip a trailing ? if it exists
    if (req.url ~ "\?$") {
        set req.url = regsub(req.url, "\?$", "");
    }

    # Normalize Accept-Encoding header
    # straight from the manual: https://www.varnish-cache.org/docs/3.0/tutorial/vary.html
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
            # No point in compressing these
            unset req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unkown algorithm
            unset req.http.Accept-Encoding;
        }
    }

    # Large static files should be piped, so they are delivered directly to the end-user without
    # waiting for Varnish to fully read the file first.
    # TODO: once the Varnish Streaming branch merges with the master branch, use streaming here to avoid locking.
    if (req.url ~ "^[^?]*\.(mp[34]|rar|tar|tgz|gz|wav|zip)(\?.*)?$") {
        unset req.http.Cookie;
        return (pipe);
    }

    # Remove all cookies for static files
    # A valid discussion could be held on this line: do you really need to cache static files that don't cause load? Only if you have memory left.
    # Sure, there's disk I/O, but chances are your OS will already have these files in their buffers (thus memory).
    # Before you blindly enable this, have a read here: http://mattiasgeniar.be/2012/11/28/stop-caching-static-files/
    if (req.url ~ "^[^?]*\.(bmp|gif|ico|jpeg|jpg|png|gz|bz2|zip|doc|docx|xls|xlsx|odt|flv|pdf|rtf|swf)(\?.*)?$") {
        unset req.http.Cookie;
        return (pass);
    }
    # Only cache assets
    if (req.url ~ "^[^?]*\.(css|js|less|eot|ttf|woff|txt|xml|html|htm)(\?.*)?$") {
        unset req.http.Cookie;
        return (hash);
    }

    # Remove all cookies
    if (req.http.Cookie) {
        # Forward to the backend admin if a session exists and disable cache
        if (req.http.Cookie ~ "SESS[a-z0-9]+") {
            <% if backends_admin_exists -%>
            set req.backend_hint = cluster_admin.backend();
            <% end -%>
            return (pass);
        }

        # Remove all cookies for SSO My Account
        if (req.url ~ "^/api/myaccount" && req.http.Cookie ~ "RC-API-SESSID") {
            return (pass);
        }

        unset req.http.Cookie;
    }

    return (hash);
}

sub vcl_pipe {
    # Note that only the first request to the backend will have
    # X-Forwarded-For set.  If you use X-Forwarded-For and want to
    # have it set for all requests, make sure to have:
    # set bereq.http.connection = "close";
    # here.  It is not set by default as it might break some broken web
    # applications, like IIS with NTLM authentication.

    #set bereq.http.Connection = "Close";
    return (pipe);
}

# The data on which the hashing will take place
sub vcl_hash {
    hash_data(req.url);

    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }

    return (lookup);
}

# Handle the HTTP request coming from our backend
sub vcl_backend_response {

    # Add the backend name in the response
    set beresp.http.X-Backend = beresp.backend.name;

    # Set response host for invalidation purpose
    set beresp.http.X-Domain = bereq.http.host;

    # Enable cache for all static files
    # The same argument as the static caches from above: monitor your cache size, if you get data nuked out of it, consider giving up the static file cache.
    # Before you blindly enable this, have a read here: http://mattiasgeniar.be/2012/11/28/stop-caching-static-files/
    if (bereq.url ~ "^[^?]*\.(bmp|bz2|css|doc|flv|gif|gz|ico|jpeg|jpg|js|less|mp[34]|pdf|png|rar|rtf|swf|tar|tgz|txt|wav|svg|eot|ttf|woff|json|xml|zip)(\?.*)?$") {
        set beresp.ttl = 15d;
        unset beresp.http.set-cookie;
    }

    # Sometimes, a 301 or 302 redirect formed via Apache's mod_rewrite can mess with the HTTP port that is being passed along.
    # This often happens with simple rewrite rules in a scenario where Varnish runs on :80 and Apache on :8080 on the same box.
    # A redirect can then often redirect the end-user to a URL on :8080, where it should be :80.
    # This may need finetuning on your setup.
    #
    # To prevent accidental replace, we only filter the 301/302 redirects for now.
    if (beresp.status == 301 || beresp.status == 302) {
        set beresp.http.Location = regsub(beresp.http.Location, ":[0-9]+", "");
    }

    # Handle 4xx HTTP responses
    if (beresp.status == 401 || beresp.status == 403 || beresp.status == 404) {
        # This little ttl ensures flood prevention on client errors codes (4xx)
        unset beresp.http.Cache-Control;
        set beresp.http.X-Cache-Rule = "Cache 60s - Flood prevention on client errors codes (4xx)";
        set beresp.ttl = 60s;
    }

    if (beresp.http.Cache-Control ~ "no-cache"){
        set beresp.ttl = 0s;
    }

    return (deliver);
}

# The routine when we deliver the HTTP request to the user
# Last chance to modify headers that are sent to the client
sub vcl_deliver {

    # Flag cache to debug
    if (obj.hits > 0) {
        set resp.http.X-Varnish-Cache = "HIT";
    } else {
        set resp.http.X-Varnish-Cache = "MISS";
    }

    # Remove some headers: PHP version
    unset resp.http.X-Powered-By;

    # Remove some headers: Apache version & OS
    unset resp.http.Server;
    unset resp.http.X-Domain;
    unset resp.http.X-Drupal-Cache;
    unset resp.http.X-Drupal-Cache-Tags;
    unset resp.http.X-Varnish;
    unset resp.http.Via;
    unset resp.http.Link;

    return (deliver);
}

sub vcl_hit {
    return (deliver);
}

sub vcl_miss {
    return (fetch);
}

sub vcl_pass {
    return (fetch);
}

sub vcl_synth {
    return (deliver);
}

sub vcl_init {
    return (ok);
}

sub vcl_fini {
    return (ok);
}